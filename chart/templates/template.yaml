apiVersion: apps/v1
kind: {{ if .Values.topology.proxyPerNode }}DaemonSet{{ else }}Deployment{{ end }}
metadata:
  namespace: {{ .Release.Name }}
  name: web
  labels:
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: web
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Chart.Name }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/component: web
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Chart.Name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: web
    spec:
      containers:
      - name: web
        image: {{ .Values.image }}
        ports:
        - name: http
          containerPort: 80
          protocol: TCP
        volumeMounts:
        - name: config
          mountPath: "/config"
          readOnly: true
        - name: external-secret
          mountPath: "/externalSecrets"
          readOnly: true
        # - name: https
        #   containerPort: 443
        #   protocol: TCP
        resources:
          requests:
            cpu: 100m
            memory: 90Mi
        env:
          - name: HTTP_TOOLKIT_ENABLED
            value: {{ .Values.httptoolkit.enable | quote }}
      volumes:
        - name: config
          configMap:
            name: config
        - name: external-secret
          secret:
            secretName: external-secret
      nodeSelector:
        kubernetes.io/os: linux
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: web
  name: web
  namespace: {{ .Release.Name }}
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
    # - name: https
    #   port: 443
    #   protocol: TCP
    #   targetPort: https
    - name: debug
      port: 9229
      protocol: TCP
      targetPort: 9229
  selector:
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: web
{{ if .Values.topology.useTopologyKeys }}
  topologyKeys:
    - "kubernetes.io/hostname"
{{ end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: config
data:
  config.json: {{ (dict "apis" .Values.config.apis "apiCredentials" .Values.config.apiCredentials "apiEnvironments" (get .Values.config.apiEnvironmentSets .Values.config.useAPIEnvironmentSet)) | toPrettyJson | quote }}